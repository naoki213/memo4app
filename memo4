<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>memo2</title>
  <style>
    body { font-family: sans-serif; margin: 0; padding: 0; background: #f4f4f4; }
    .tabs { display: flex; background: #333; color: white; }
    .tab { padding: 10px 20px; cursor: pointer; }
    .tab.active { background: #555; }
    .content { display: none; padding: 20px; }
    .content.active { display: block; }
    textarea, input[type="text"] { width: 100%; padding: 10px; margin-top: 10px; }
    textarea { resize: vertical; }
    button { margin-top: 10px; padding: 10px 20px; }
    .btn-group button { margin-right: 10px; }
    .score { font-weight: bold; margin-left: 10px; }
    .score.red { color: red; }
    .score.green { color: green; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

<script>
let questions = JSON.parse(localStorage.getItem('questions') || '[]');
questions.forEach(q => {
  q.score = q.score ?? 0;
  q.category = q.category ?? '';
});

const password = prompt("パスワードを入力してください：");
if (password !== "2410") {
  document.body.innerHTML = '<h2>アクセスが拒否されました。</h2>';
  throw new Error("パスワード不正");
}

let currentQueue = [];
let currentIndex = 0;
let showAnswerToggle = false;

function switchTab(index) {
  document.querySelectorAll('.tab').forEach((tab, i) => tab.classList.toggle('active', i === index));
  document.querySelectorAll('.content').forEach((content, i) => content.classList.toggle('active', i === index));
  if (index === 2) renderList();
  if (index === 0) updateCategoryOptions();
  if (index === 3) renderChart();
}

function saveQuestion() {
  const q = document.getElementById('newQuestion').value.trim();
  const a = document.getElementById('newAnswer').value.trim();
  const c = document.getElementById('newCategory').value.trim();
  if (q && a) {
    questions.push({ question: q, answer: a, category: c, queue: 0, origin: true, score: 0 });
    localStorage.setItem('questions', JSON.stringify(questions));
    document.getElementById('newQuestion').value = '';
    document.getElementById('newAnswer').value = '';
    document.getElementById('newCategory').value = '';
  }
}

function renderList() {
  const list = document.getElementById('questionList');
  list.innerHTML = '';
  const grouped = {};
  questions.forEach((qa, i) => {
    if (!qa.origin) return;
    const cat = qa.category || '未分類';
    if (!grouped[cat]) grouped[cat] = [];
    grouped[cat].push({ ...qa, index: i });
  });

  Object.keys(grouped).forEach(cat => {
    const groupTitle = document.createElement('h3');
    groupTitle.textContent = `カテゴリ: ${cat}`;
    list.appendChild(groupTitle);
    grouped[cat].forEach(qa => {
      const scoreClass = qa.score <= -3 ? 'red' : (qa.score >= 3 ? 'green' : '');
      const li = document.createElement('li');
      li.innerHTML = `Q${qa.index + 1}: <input value="${qa.question}" onchange="editQuestion(${qa.index}, 'question', this.value)"> ／ A: <input value="${qa.answer}" onchange="editQuestion(${qa.index}, 'answer', this.value)"> ／ カテゴリ: <input value="${qa.category}" onchange="editQuestion(${qa.index}, 'category', this.value)"><span class="score ${scoreClass}">（${qa.score}）</span>`;
      list.appendChild(li);
    });
  });
}

function editQuestion(index, field, value) {
  questions[index][field] = value;
  localStorage.setItem('questions', JSON.stringify(questions));
}

function startExercise() {
  if (questions.length === 0) return alert('問題がありません');
  const weighted = [];
  questions.forEach((q, i) => {
    if (!q.origin) return;
    const weight = Math.max(1, 10 - q.score);
    for (let j = 0; j < weight; j++) weighted.push({ ...q, index: i });
  });
  shuffle(weighted);
  currentQueue = weighted;
  currentIndex = 0;
  nextQuestion();
}

function startLowScoreExercise() {
  const lowScore = questions.map((q, i) => ({ ...q, index: i })).filter(q => q.origin && q.score <= -3);
  if (lowScore.length === 0) return alert('スコア-3以下の問題がありません');
  const weighted = [];
  lowScore.forEach(q => {
    const weight = Math.max(1, 10 - q.score);
    for (let j = 0; j < weight; j++) weighted.push(q);
  });
  shuffle(weighted);
  currentQueue = weighted;
  currentIndex = 0;
  nextQuestion();
}

function updateCategoryOptions() {
  const select = document.getElementById('categorySelect');
  if (!select) return;
  const categories = [...new Set(questions.filter(q => q.origin).map(q => q.category || '未分類'))];
  select.innerHTML = '<option value="">すべてのカテゴリ</option>';
  categories.forEach(cat => {
    const option = document.createElement('option');
    option.value = cat;
    option.textContent = cat;
    select.appendChild(option);
  });
}

function startExerciseByCategory() {
  const selected = document.getElementById('categorySelect').value;
  const filtered = questions.map((q, i) => ({ ...q, index: i })).filter(q => q.origin && (!selected || (q.category || '未分類') === selected));
  if (filtered.length === 0) return alert('該当カテゴリに問題がありません');
  const weighted = [];
  filtered.forEach(q => {
    const weight = Math.max(1, 10 - q.score);
    for (let j = 0; j < weight; j++) weighted.push(q);
  });
  shuffle(weighted);
  currentQueue = weighted;
  currentIndex = 0;
  nextQuestion();
}

function shuffle(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

function nextQuestion() {
  if (currentIndex >= currentQueue.length) {
    alert('全問終了');
    return;
  }
  const q = currentQueue[currentIndex];
  document.getElementById('exerciseQuestion').textContent = `Q${q.index + 1}: ${q.question}`;
  document.getElementById('exerciseAnswer').value = '';
  document.getElementById('correctAnswer').textContent = '';
  showAnswerToggle = false;
}

function checkEnter(event) {
  if (event.key === 'Enter') {
    event.preventDefault();
    showAnswerToggle = !showAnswerToggle;
    const answerDisplay = document.getElementById('correctAnswer');
    answerDisplay.textContent = showAnswerToggle ? '正解: ' + currentQueue[currentIndex].answer : '';
  }
}

function gradeAnswer(grade) {
  const q = currentQueue[currentIndex];
  const delta = grade === 'maru' ? 1 : grade === 'sankaku' ? -0.5 : -1;
  questions[q.index].score = (questions[q.index].score ?? 0) + delta;
  localStorage.setItem('questions', JSON.stringify(questions));
  currentIndex++;
  nextQuestion();
}

function downloadQuestions() {
  const original = questions.filter(q => q.origin);
  const blob = new Blob([JSON.stringify(original, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'questions.json';
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}

function uploadQuestions() {
  const fileInput = document.getElementById('fileInput');
  const file = fileInput.files[0];
  if (!file) return alert('ファイルを選択してください');
  const reader = new FileReader();
  reader.onload = function (e) {
    try {
      const data = JSON.parse(e.target.result);
      if (!Array.isArray(data)) throw new Error();
      questions = data.map(q => ({ ...q, origin: true, score: q.score ?? 0, category: q.category ?? '' }));
      localStorage.setItem('questions', JSON.stringify(questions));
      alert('インポート完了');
      renderList();
    } catch {
      alert('不正なデータです');
    }
  };
  reader.readAsText(file);
}

function startSpeechRecognition(targetId) {
  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = 'ja-JP';
  recognition.onresult = function(event) {
    const text = event.results[0][0].transcript;
    document.getElementById(targetId).value += text;
  };
  recognition.start();
}

function renderChart() {
  const categoryStats = {};
  questions.forEach(q => {
    if (!q.origin) return;
    const cat = q.category || '未分類';
    if (!categoryStats[cat]) categoryStats[cat] = { correct: 0, total: 0 };

    const s = q.score ?? 0;
    const absS = Math.abs(s);
    if (absS > 0) {
      categoryStats[cat].total += absS;
      if (s > 0) categoryStats[cat].correct += s;
    }
  });

  const labels = Object.keys(categoryStats);
  const data = labels.map(cat => {
    const { correct, total } = categoryStats[cat];
    const rate = total === 0 ? 0 : correct / total;
    return parseFloat((rate * 100).toFixed(2));
  });

  const ctx = document.getElementById('scoreChart').getContext('2d');
  if (window.scoreChartInstance) window.scoreChartInstance.destroy();
  window.scoreChartInstance = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{ label: '正答率（％）', data: data }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          ticks: { callback: value => value + '%' }
        }
      }
    }
  });
}
</script>

<div class="tabs">
  <div class="tab active" onclick="switchTab(0)">演習（A）</div>
  <div class="tab" onclick="switchTab(1)">入力（B）</div>
  <div class="tab" onclick="switchTab(2)">確認（C）</div>
  <div class="tab" onclick="switchTab(3)">グラフ（D）</div>
</div>

<div class="content active">
  <h2 id="exerciseQuestion">ここに問題が表示されます</h2>
  <textarea id="exerciseAnswer" rows="3" onkeydown="checkEnter(event)" placeholder="ここに解答を入力"></textarea>
  <p id="correctAnswer"></p>
  <div class="btn-group">
    <button onclick="gradeAnswer('maru')">○</button>
    <button onclick="gradeAnswer('sankaku')">△</button>
    <button onclick="gradeAnswer('batsu')">×</button>
  </div>
  <button onclick="startExercise()">通常出題スタート</button>
  <button onclick="startLowScoreExercise()">スコア-3以下だけ出題</button>
  <br><br>
  <select id="categorySelect"></select>
  <button onclick="startExerciseByCategory()">このカテゴリで出題</button>
</div>

<div class="content">
  <h2>問題入力</h2>
  <textarea id="newQuestion" placeholder="問題を入力"></textarea>
  <button onclick="startSpeechRecognition('newQuestion')">🎤音声入力（問題）</button>
  <textarea id="newAnswer" placeholder="解答を入力"></textarea>
  <button onclick="startSpeechRecognition('newAnswer')">🎤音声入力（解答）</button>
  <input type="text" id="newCategory" placeholder="カテゴリを入力">
  <br>
  <button onclick="saveQuestion()">保存</button>
</div>

<div class="content">
  <h2>問題確認／編集</h2>
  <ul id="questionList"></ul>
  <input type="file" id="fileInput">
  <button onclick="uploadQuestions()">インポート</button>
  <button onclick="downloadQuestions()">エクスポート</button>
</div>

<div class="content">
  <h2>カテゴリ別 正答率グラフ</h2>
  <canvas id="scoreChart" width="400" height="200"></canvas>
</div>

</body>
</html>
